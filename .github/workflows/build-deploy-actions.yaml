name: Build and deploy
on: [push]


#    branches: [deploy, test]

jobs:

  build_and_push:

    name: Build and push
    needs: tests
    runs-on: main-linux

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.API_NAME }}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./todolist/.
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  deploy:
    runs-on: main-linux
    name: Deploy
    needs: [build_and_push]
    if: needs.build_and_push.result == 'success'

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      API_NAME: ${{ secrets.API_NAME }}
      DOCKER_FRONT_PROVIDER_USERNAME: ${{ secrets.DOCKER_FRONT_PROVIDER_USERNAME }}
      DOCKER_FRONT_IMAGE_NAME: ${{ secrets.DOCKER_FRONT_IMAGE_NAME }}
      DOCKER_FRONT_IMAGE_TAG: ${{ secrets.DOCKER_FRONT_IMAGE_TAG }}
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_CONTAINER_PORT: ${{ secrets.DB_CONTAINER_PORT }}
      DB_HOST_PORT: ${{ secrets.DB_HOST_PORT }}
      DEBUG: ${{ secrets.DEBUG }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      VK_OAUTH2_KEY: ${{ secrets.VK_OAUTH2_KEY }}
      VK_OAUTH2_SECRET: ${{ secrets.VK_OAUTH2_SECRET }}
      VK_OAUTH2_SCOPE: ${{ secrets.VK_OAUTH2_SCOPE }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Render configs
        run: |
          cd deploy
          cat docker-compose-ci.yaml | envsubst > docker-compose.yaml
          cat ci.env | envsubst > .env
      - name: Copy file via ssh-session
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
#          key: ${{ secrets.SERVER_KEY }}
          port: 22
          source: "deploy/docker-compose.yaml, deploy/.env, deploy/nginx.conf"
          target: "todolist_code"
          strip_components: 1
      - name: Deploy app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
#          key: ${{ secrets.SERVER_KEY }}
          port: 22
          script: |
            cd todolist_code
            docker compose down --rmi all --volumes
            docker system prune --all --volumes -f
            docker compose up -d
#            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker compose down --rmi all --volumes
#            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker system prune --all -v -f
#            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker compose up -d
