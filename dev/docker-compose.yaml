version: '3.9'

services:
  db:
    image: postgres:15
#    env_file:
#      - local.env
    volumes:
      - ../database/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGPORT: 5432
    restart: on-failure
    ports:
    - "${DB_CONTAINER_PORT}:${DB_CONTAINER_PORT}"
    networks:
      - backend_network

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  front:
    image: sermalenk/skypro-front:lesson-38
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ../todolist/static/:/opt/static/
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    networks:
      - frontend_network
#
#  migrations:
#    build: ./todolist/.
##    env_file:
##      - .env
#    depends_on:
#      db:
#        condition: service_healthy
#    command: >
#      sh -c "python manage.py migrate"
#    networks:
#      - backend_network

  bot:
    build:
      context: ../todolist/.
      dockerfile: Dockerfile-dev
    volumes:
      - ../:/todolist_code/
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    command: >
      sh -c "python manage.py runbot"
    networks:
      - backend_network

  api:
    build:
      context: ../todolist/.
      dockerfile: Dockerfile-dev
#    env_file:
#      - local.env
    volumes:
      - ../:/todolist_code/
#    ports:
#      - "8000:8000"
    depends_on:
#      migrations:
#        condition: service_completed_successfully
      db:
        condition: service_healthy
    networks:
      - backend_network
      - frontend_network

volumes:
  postgres_data:

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
