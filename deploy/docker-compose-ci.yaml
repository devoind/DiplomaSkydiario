version: '3.9'

services:
  db:
    image: postgres:latest
    volumes:
      - ./database/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGPORT: ${DB_CONTAINER_PORT}
    restart: on-failure
    networks:
      - backend_network

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  front:
    image: $DOCKER_FRONT_PROVIDER_USERNAME/$DOCKER_FRONT_IMAGE_NAME:$DOCKER_FRONT_IMAGE_TAG
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static/:/opt/static/
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - frontend_network

  bot:
    image: $DOCKER_USERNAME/$API_NAME:latest
    volumes:
      - ./.env:/todolist_code/.env
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    command: >
      sh -c "python manage.py runbot"
    networks:
      - backend_network

  api:
    image: $DOCKER_USERNAME/$API_NAME:latest
    volumes:
      - ./.env:/todolist_code/.env
      - ./static/:/todolist_code/todolist/static/
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: python3 -c 'import http.client;http.client.HTTPConnection("127.0.0.1:8000", timeout=1).request("GET", "/ping/")'
      interval: 5s
      timeout: 2s
      retries: 3
    networks:
      - backend_network
      - frontend_network

volumes:
  postgres_data:

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
